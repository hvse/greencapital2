/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// require('./bootstrap');\n__webpack_require__(/*! ./numeric */ \"./resources/js/numeric.js\");\n\n$(function () {\n  return console.log('holaaa');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLG1CQUFPLENBQUMsNENBQUQsQ0FBUDs7QUFDQUMsQ0FBQyxDQUFDO0VBQUEsT0FBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWixDQUFOO0FBQUEsQ0FBRCxDQUFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC5qcz9jZWQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHJlcXVpcmUoJy4vYm9vdHN0cmFwJyk7XG5yZXF1aXJlKFwiLi9udW1lcmljXCIpXG4kKCgpID0+IGNvbnNvbGUubG9nKCdob2xhYWEnKSkiXSwibmFtZXMiOlsicmVxdWlyZSIsIiQiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/numeric.js":
/*!*********************************!*\
  !*** ./resources/js/numeric.js ***!
  \*********************************/
/***/ (() => {

eval("/*\n *\n * Copyright (c) 2006-2011 Sam Collett (http://www.texotela.co.uk)\n * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)\n * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.\n * \n * Version 1.3.1\n * Demo: http://www.texotela.co.uk/code/jquery/numeric/\n *\n */\n(function ($) {\n  /*\n   * Allows only valid characters to be entered into input boxes.\n   * Note: fixes value when pasting via Ctrl+V, but not when using the mouse to paste\n    *      side-effect: Ctrl+A does not work, though you can still use the mouse to select (or double-click to select all)\n   *\n   * @name     numeric\n   * @param    config      { decimal : \".\" , negative : true }\n   * @param    callback     A function that runs if the number is not valid (fires onblur)\n   * @author   Sam Collett (http://www.texotela.co.uk)\n   * @example  $(\".numeric\").numeric();\n   * @example  $(\".numeric\").numeric(\",\"); // use , as separater\n   * @example  $(\".numeric\").numeric({ decimal : \",\" }); // use , as separator\n   * @example  $(\".numeric\").numeric({ negative : false }); // do not allow negative values\n   * @example  $(\".numeric\").numeric(null, callback); // use default values, pass on the 'callback' function\n   *\n   */\n  $.fn.numeric = function (config, callback) {\n    if (typeof config === 'boolean') {\n      config = {\n        decimal: config\n      };\n    }\n\n    config = config || {}; // if config.negative undefined, set to true (default is to allow negative numbers)\n\n    if (typeof config.negative == \"undefined\") config.negative = true; // set decimal point\n\n    var decimal = config.decimal === false ? \"\" : config.decimal || \".\"; // allow negatives\n\n    var negative = config.negative === true ? true : false; // callback function\n\n    var callback = typeof callback == \"function\" ? callback : function () {}; // set data and methods\n\n    return this.data(\"numeric.decimal\", decimal).data(\"numeric.negative\", negative).data(\"numeric.callback\", callback).keypress($.fn.numeric.keypress).keyup($.fn.numeric.keyup).blur($.fn.numeric.blur);\n  };\n\n  $.fn.numeric.keypress = function (e) {\n    // get decimal character and determine if negatives are allowed\n    var decimal = $.data(this, \"numeric.decimal\");\n    var negative = $.data(this, \"numeric.negative\"); // get the key that was pressed\n\n    var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0; // allow enter/return key (only when in an input box)\n\n    if (key == 13 && this.nodeName.toLowerCase() == \"input\") {\n      return true;\n    } else if (key == 13) {\n      return false;\n    }\n\n    var allow = false; // allow Ctrl+A\n\n    if (e.ctrlKey && key == 97\n    /* firefox */\n    || e.ctrlKey && key == 65\n    /* opera */\n    ) return true; // allow Ctrl+X (cut)\n\n    if (e.ctrlKey && key == 120\n    /* firefox */\n    || e.ctrlKey && key == 88\n    /* opera */\n    ) return true; // allow Ctrl+C (copy)\n\n    if (e.ctrlKey && key == 99\n    /* firefox */\n    || e.ctrlKey && key == 67\n    /* opera */\n    ) return true; // allow Ctrl+Z (undo)\n\n    if (e.ctrlKey && key == 122\n    /* firefox */\n    || e.ctrlKey && key == 90\n    /* opera */\n    ) return true; // allow or deny Ctrl+V (paste), Shift+Ins\n\n    if (e.ctrlKey && key == 118\n    /* firefox */\n    || e.ctrlKey && key == 86\n    /* opera */\n    || e.shiftKey && key == 45) return true; // if a number was not pressed\n\n    if (key < 48 || key > 57) {\n      var value = $(this).val();\n      /* '-' only allowed at start and if negative numbers allowed */\n\n      if (value.indexOf(\"-\") != 0 && negative && key == 45 && (value.length == 0 || $.fn.getSelectionStart(this) == 0)) return true;\n      /* only one decimal separator allowed */\n\n      if (decimal && key == decimal.charCodeAt(0) && value.indexOf(decimal) != -1) {\n        allow = false;\n      } // check for other keys that have special purposes\n\n\n      if (key != 8\n      /* backspace */\n      && key != 9\n      /* tab */\n      && key != 13\n      /* enter */\n      && key != 35\n      /* end */\n      && key != 36\n      /* home */\n      && key != 37\n      /* left */\n      && key != 39\n      /* right */\n      && key != 46\n      /* del */\n      ) {\n        allow = false;\n      } else {\n        // for detecting special keys (listed above)\n        // IE does not support 'charCode' and ignores them in keypress anyway\n        if (typeof e.charCode != \"undefined\") {\n          // special keys have 'keyCode' and 'which' the same (e.g. backspace)\n          if (e.keyCode == e.which && e.which != 0) {\n            allow = true; // . and delete share the same code, don't allow . (will be set to true later if it is the decimal point)\n\n            if (e.which == 46) allow = false;\n          } // or keyCode != 0 and 'charCode'/'which' = 0\n          else if (e.keyCode != 0 && e.charCode == 0 && e.which == 0) {\n            allow = true;\n          }\n        }\n      } // if key pressed is the decimal and it is not already in the field\n\n\n      if (decimal && key == decimal.charCodeAt(0)) {\n        if (value.indexOf(decimal) == -1) {\n          allow = true;\n        } else {\n          allow = false;\n        }\n      }\n    } else {\n      allow = true;\n    }\n\n    return allow;\n  };\n\n  $.fn.numeric.keyup = function (e) {\n    var val = $(this).value;\n\n    if (val && val.length > 0) {\n      // get carat (cursor) position\n      var carat = $.fn.getSelectionStart(this); // get decimal character and determine if negatives are allowed\n\n      var decimal = $.data(this, \"numeric.decimal\");\n      var negative = $.data(this, \"numeric.negative\"); // prepend a 0 if necessary\n\n      if (decimal != \"\") {\n        // find decimal point\n        var dot = val.indexOf(decimal); // if dot at start, add 0 before\n\n        if (dot == 0) {\n          this.value = \"0\" + val;\n        } // if dot at position 1, check if there is a - symbol before it\n\n\n        if (dot == 1 && val.charAt(0) == \"-\") {\n          this.value = \"-0\" + val.substring(1);\n        }\n\n        val = this.value;\n      } // if pasted in, only allow the following characters\n\n\n      var validChars = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, '-', decimal]; // get length of the value (to loop through)\n\n      var length = val.length; // loop backwards (to prevent going out of bounds)\n\n      for (var i = length - 1; i >= 0; i--) {\n        var ch = val.charAt(i); // remove '-' if it is in the wrong place\n\n        if (i != 0 && ch == \"-\") {\n          val = val.substring(0, i) + val.substring(i + 1);\n        } // remove character if it is at the start, a '-' and negatives aren't allowed\n        else if (i == 0 && !negative && ch == \"-\") {\n          val = val.substring(1);\n        }\n\n        var validChar = false; // loop through validChars\n\n        for (var j = 0; j < validChars.length; j++) {\n          // if it is valid, break out the loop\n          if (ch == validChars[j]) {\n            validChar = true;\n            break;\n          }\n        } // if not a valid character, or a space, remove\n\n\n        if (!validChar || ch == \" \") {\n          val = val.substring(0, i) + val.substring(i + 1);\n        }\n      } // remove extra decimal characters\n\n\n      var firstDecimal = val.indexOf(decimal);\n\n      if (firstDecimal > 0) {\n        for (var i = length - 1; i > firstDecimal; i--) {\n          var ch = val.charAt(i); // remove decimal character\n\n          if (ch == decimal) {\n            val = val.substring(0, i) + val.substring(i + 1);\n          }\n        }\n      } // set the value and prevent the cursor moving to the end\n\n\n      this.value = val;\n      $.fn.setSelection(this, carat);\n    }\n  };\n\n  $.fn.numeric.blur = function () {\n    var decimal = $.data(this, \"numeric.decimal\");\n    var callback = $.data(this, \"numeric.callback\");\n    var val = this.value;\n\n    if (val != \"\") {\n      var re = new RegExp(\"^\\\\d+$|\\\\d*\" + decimal + \"\\\\d+\");\n\n      if (!re.exec(val)) {\n        callback.apply(this);\n      }\n    }\n  };\n\n  $.fn.removeNumeric = function () {\n    return this.data(\"numeric.decimal\", null).data(\"numeric.negative\", null).data(\"numeric.callback\", null).unbind(\"keypress\", $.fn.numeric.keypress).unbind(\"blur\", $.fn.numeric.blur);\n  }; // Based on code from http://javascript.nwbox.com/cursor_position/ (Diego Perini <dperini@nwbox.com>)\n\n\n  $.fn.getSelectionStart = function (o) {\n    if (o.createTextRange) {\n      var r = document.selection.createRange().duplicate();\n      r.moveEnd('character', o.value.length);\n      if (r.text == '') return o.value.length;\n      return o.value.lastIndexOf(r.text);\n    } else return o.selectionStart;\n  }; // set the selection, o is the object (input), p is the position ([start, end] or just start)\n\n\n  $.fn.setSelection = function (o, p) {\n    // if p is number, start and end are the same\n    if (typeof p == \"number\") p = [p, p]; // only set if p is an array of length 2\n\n    if (p && p.constructor == Array && p.length == 2) {\n      if (o.createTextRange) {\n        var r = o.createTextRange();\n        r.collapse(true);\n        r.moveStart('character', p[0]);\n        r.moveEnd('character', p[1]);\n        r.select();\n      } else if (o.setSelectionRange) {\n        o.focus();\n        o.setSelectionRange(p[0], p[1]);\n      }\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/numeric.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/app.js");
/******/ 	
/******/ })()
;